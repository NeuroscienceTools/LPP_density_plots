#     }
#   }
#
# close(pb)
pb <- txtProgressBar(min=0, max=nrow(region_to_aba)*length(unique(meta_data_samples$celltype)), initial=0,style=3)
actRow<-0
#Compute mean gene expression per brain-region
for(actRegionRow in (1:nrow(region_to_aba))){
for(celltype in unique(meta_data_samples$celltype)){
#Check if we have data about this region and cell type available. Otherwise set it NA
selectedSamples<-meta_data_samples$brainRegionStudiedMapped==region_to_aba$brainRegions[actRegionRow] & meta_data_samples$celltype==celltype
if(sum(selectedSamples)>0){
if(sum(selectedSamples)>1){
if(computeMaximumInsteadOfMean){
region_level_gene_expression_per_celltype[[paste(celltype)]][,actRegionRow]<-apply(rna_data[,selectedSamples],1,function(x){max(x,na.rm=TRUE)})
}else{
region_level_gene_expression_per_celltype[[paste(celltype)]][,actRegionRow]<-apply(rna_data[,selectedSamples],1,mean)
}
}else{
region_level_gene_expression_per_celltype[[paste(celltype)]][,actRegionRow]<-rna_data[,selectedSamples]
}
}
actRow<-actRow+1
setTxtProgressBar(pb, actRow)
}
}
close(pb)
#scale maximum value
maximumValue<-0
celltypes_with_expression<-c()
for(celltype in unique(meta_data_samples$celltype)){
scaledExpression<-region_level_gene_expression_per_celltype[[paste(celltype)]]
#scaledExpression<-log(scaledExpression)
#scaledExpression<-log(scaledExpression)+3
#scaledExpression[scaledExpression>quantile(scaledExpression,0.99,na.rm=TRUE)]<-quantile(scaledExpression,0.99,na.rm=TRUE)
#Taking the maximum is best. Since we map the data to values between 0 and 256, we need the best acuracy for the larger values (top hits in queries)
print(paste0("Celltype ",celltype," max: ",max(scaledExpression,na.rm=TRUE)))
print(paste0("Celltype ",celltype,"90-quantile: ",quantile(scaledExpression[scaledExpression>0],0.9,na.rm=TRUE)))
#scaledExpression[scaledExpression>max(scaledExpression,na.rm=TRUE)]<-max(scaledExpression,na.rm=TRUE)
scaledExpression[scaledExpression<0]<-0
#maximumValue<-max(c(maximumValue,quantile(scaledExpression[scaledExpression>0],0.95,na.rm=TRUE)),na.rm=TRUE)
maximumValue<-max(c(maximumValue,max(scaledExpression[scaledExpression>0],na.rm=TRUE)),na.rm=TRUE)
region_level_gene_expression_per_celltype[[paste(celltype)]]<-scaledExpression
if(sum(scaledExpression,na.rm=TRUE)>0){
celltypes_with_expression<-c(celltypes_with_expression,celltype)
}else{
print(paste0("Warning: celltype ",celltype," has no expression at all!"))
}
}
maximumAmountOfImagesOfTheSameCellTypeInMaximum8BitBin<-0
lowest8BitBinOfImagesOfTheSameCellType<-256
worstCelltype<-""
sumSmallerHalf<-0
sumHigherHalf<-0
sumSmallerQuarter<-0
sumHigherQuarter<-0
lengthAll<-0
lengthAllNotNA<-0
for(celltype in unique(meta_data_samples$celltype)){
scaledExpression<-region_level_gene_expression_per_celltype[[paste(celltype)]]
sumSmallerHalf<-sumSmallerHalf+sum(scaledExpression[scaledExpression>0]<(maximumValue/2),na.rm=TRUE)
sumHigherHalf<-sumHigherHalf+sum(scaledExpression[scaledExpression>0]>=(maximumValue/2),na.rm=TRUE)
sumSmallerQuarter<-sumSmallerQuarter+sum(scaledExpression[scaledExpression>0]<(maximumValue/4),na.rm=TRUE)
sumHigherQuarter<-sumHigherQuarter+sum(scaledExpression[scaledExpression>0]>=(3*maximumValue/4),na.rm=TRUE)
lengthAll<-lengthAll+length(scaledExpression)
lengthAllNotNA<-lengthAllNotNA+sum(!is.na(scaledExpression))
for(bitBin in 256:0){
if(sum(scaledExpression>(maximumValue*bitBin)/(256),na.rm=TRUE)>0){
maximumAmountOfImagesOfTheSameCellTypeInMaximum8BitBin<-max(c(maximumAmountOfImagesOfTheSameCellTypeInMaximum8BitBin,sum(scaledExpression>(maximumValue*bitBin)/(256),na.rm=TRUE)))
if(lowest8BitBinOfImagesOfTheSameCellType>bitBin){
lowest8BitBinOfImagesOfTheSameCellType<-bitBin
worstCelltype<-celltype
}
break
}
}
}
print(paste("Maximum value:",maximumValue))
print(paste("Maximum amount of images of the same cell type in maximum 8 bit bin (amount of similar top results for a query): ",maximumAmountOfImagesOfTheSameCellTypeInMaximum8BitBin))
print(paste("Lowest 8 bit bin of images of the same cell type (worst precission of a cell type):",lowest8BitBinOfImagesOfTheSameCellType,"for",worstCelltype))
print(paste0("Relative amout of mapped values (<64<128<192<) ",sumSmallerQuarter/(sumSmallerQuarter+sumSmallerHalf+sumHigherHalf+sumHigherQuarter)," ",sumSmallerHalf/(sumSmallerQuarter+sumSmallerHalf+sumHigherHalf+sumHigherQuarter)," ",sumHigherHalf/(sumSmallerQuarter+sumSmallerHalf+sumHigherHalf+sumHigherQuarter)," ",sumHigherQuarter/(sumSmallerQuarter+sumSmallerHalf+sumHigherHalf+sumHigherQuarter)))
print(paste0("Relative amount of values not 0: ",(sumSmallerHalf+sumHigherHalf)/lengthAll))
print(paste0("Relative amount of values not 0 (based on not NA values): ",(sumSmallerHalf+sumHigherHalf)/lengthAllNotNA))
datasetJson[["maximumValue"]]<-paste0(maximumValue)
}
print("Define output data and create regions to coordinates file")
if(new_index){
#output data json and outputImages need the same name!!!
outputData<-paste0(outputDir,"input_data/datasets/",gsub(" ","_",datasetJson[["name"]]),"_count_matrix.json")
outputImages<-paste0(outputDir,"spatialdata/datasets/",gsub(" ","_",datasetJson[["name"]]),"")
if(species=="human"){
outputData<-paste0(outputDir,"input_data/datasets/",gsub(" ","_",datasetJson[["name"]]),"_flipYZ_count_matrix.json")
outputImages<-paste0(outputDir,"spatialdata/datasets/",gsub(" ","_",datasetJson[["name"]]),"_flipYZ")
}
}else{
#output data json and outputImages need the same name!!!
outputData<-paste0(outputDir,"input_data/datasets/",gsub(" ","_",datasetJson[["name"]]),".json")
outputImages<-paste0(outputDir,"spatialdata/datasets/",gsub(" ","_",datasetJson[["name"]]),"")
if(species=="human"){
outputData<-paste0(outputDir,"input_data/datasets/",gsub(" ","_",datasetJson[["name"]]),"_flipYZ.json")
outputImages<-paste0(outputDir,"spatialdata/datasets/",gsub(" ","_",datasetJson[["name"]]),"_flipYZ")
}
}
dir.create(outputImages)
dir.create(paste0(outputImages,"/Data"))
dir.create(paste0(outputImages,"/Data/channelimages"))
if(createAmira==FALSE){
coordinatesRegion<-c()
if(species=="human"){
coordinatesRegion<-matrix(0,nrow=length(atlasRegions),ncol=4)
amountOfVoxels<-0
for(actRegionRow in 1:nrow(region_to_aba)){
for(actBiopsySite in (1:length(atlasRegions))[brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]]){
coordinatesRegion[amountOfVoxels+1,]<-c(round(coordinates$X[actBiopsySite]),round(coordinates$Y[actBiopsySite]),round(coordinates$Z[actBiopsySite]),actRegionRow-1)
amountOfVoxels<-amountOfVoxels+1
}
}
coordinatesRegion<-coordinatesRegion[1:amountOfVoxels,]
write.table(coordinatesRegion,paste0(outputImages,"/coordinates_to_region_index.csv"),col.names=FALSE,row.names=FALSE,dec=".",sep=",")
}
if(species=="mouse"){
coordinatesRegion<-matrix(0,nrow=length(unlist(atlasRegions)),ncol=4)
amountOfVoxels<-0
for(actRegionRow in 1:nrow(region_to_aba)){
brainRegion<-brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]
for(x in 1:dim(brainRegion)[1]){
for(y in 1:dim(brainRegion)[2]){
for(z in 1:dim(brainRegion)[3]){
if(brainRegion[x,y,z]>0){
coordinatesRegion[amountOfVoxels+1,1]<-x
coordinatesRegion[amountOfVoxels+1,2]<-y
coordinatesRegion[amountOfVoxels+1,3]<-z
coordinatesRegion[amountOfVoxels+1,4]<-actRegionRow-1
amountOfVoxels<-amountOfVoxels+1
}
}
}
}
}
coordinatesRegion<-coordinatesRegion[1:amountOfVoxels,]
write.table(coordinatesRegion,paste0(outputImages,"/coordinates_to_region_index.csv"),col.names=FALSE,row.names=FALSE,dec=".",sep=",")
}
}
if(new_index==TRUE){
print("Create count matrix and import data")
#sample_information <- meta_data_samples[,(apply(meta_data_samples,2,function(x){length(unique(x))>1}) | colnames(meta_data_samples)=="celltype") & colnames(meta_data_samples)!="brainRegionStudied" & colnames(meta_data_samples)!="brainRegionStudiedMapped" & colnames(meta_data_samples)!="sampleName"]
sample_information <- meta_data_samples[,(apply(meta_data_samples,2,function(x){length(unique(x))>1}) | colnames(meta_data_samples)=="celltype") & colnames(meta_data_samples)!="sampleName"]
sample_information$region_id <- unlist(sapply(meta_data_samples$brainRegionStudiedMapped,function(x){
if(length(region_to_aba$brainRegions)>1){
retVal <- ((1:length(region_to_aba$brainRegions))-1)[region_to_aba$brainRegions==x]
if(length(retVal)==1){
return(retVal)
}else{
return(NA)
}
}else{
return(0)
}
}),use.names = FALSE)
if(sum(is.na(sample_information$region_id))>0){
print(paste0("Warning: ",sum(is.na(sample_information$region_id))," samples of ",length(sample_information$region_id)," had no region annotation and will be removed!"))
}
sample_information_filtered<-sample_information[!is.na(sample_information$region_id),]
write.csv2(sample_information_filtered,paste0(outputImages,"/sample_information.csv"),row.names = FALSE)
genes_in_db <- read.csv2(paste0(workingDir,"//","storage/genes.csv"),header=TRUE,stringsAsFactors = FALSE)
pb <- txtProgressBar(min=0, max=nrow(rna_data), initial=0,style=3)
foundGeneInDatabase <- rep(0,nrow(rna_data))
gene_id <- rep("",nrow(rna_data))
for(actGeneRow in 1:nrow(rna_data)){
setTxtProgressBar(pb, actGeneRow)
indexFound<-c()
if(datasetJson[["imageNameIDtype"]]=="esemblid"){
indexFound<-(1:nrow(genes_in_db))[genes_in_db$ENSEMBL==rownames(rna_data)[actGeneRow]]
}
if(datasetJson[["imageNameIDtype"]]=="entrezid"){
indexFound<-(1:nrow(genes_in_db))[genes_in_db$ENTREZID==rownames(rna_data)[actGeneRow]]
}
if(datasetJson[["imageNameIDtype"]]=="symbol"){
indexFound<-(1:nrow(genes_in_db))[genes_in_db$SYMBOL==rownames(rna_data)[actGeneRow]]
}
indexFound<-indexFound[!is.na(indexFound)]
if(length(indexFound)>0){
gene_id[actGeneRow]<-paste0(genes_in_db$ENSEMBL[indexFound[1]],"_",genes_in_db$ENTREZID[indexFound[1]])
foundGeneInDatabase[actGeneRow]<-length(indexFound)
}
}
close(pb)
print(paste0("Found ",sum(foundGeneInDatabase>0)," genes (",sum(foundGeneInDatabase>1)," double) out of ",nrow(rna_data)))
print(paste0("Out of ",sum(foundGeneInDatabase>0)," found, ",sum(!duplicated(gene_id) & foundGeneInDatabase>0)," are not duplicates"))
gene_id_matrix<-matrix(gene_id[!duplicated(gene_id) & foundGeneInDatabase>0],ncol=1)
colnames(gene_id_matrix)<-c("gene_id")
write.csv2(gene_id_matrix,paste0(outputImages,"/gene_information.csv"),row.names=FALSE)
count_matrix<-rna_data[!duplicated(gene_id) & foundGeneInDatabase>0,!is.na(sample_information$region_id)]
write.csv2(count_matrix,paste0(outputImages,"/count_matrix.csv"),row.names=FALSE,col.names=FALSE)
datasetJson[["maximumValue"]]<-paste0(max(rna_data[!duplicated(gene_id) & foundGeneInDatabase>0,!is.na(sample_information$region_id)],na.rm=TRUE))
filesCreated<-1
}
if(new_index==FALSE && (!exists("useCores") || useCores==1)){
print("Compute mean gene expression on biopsy site level for every gene")
splitIntoFolderNumber<-50
#Create gene expression data as amira file
pb <- txtProgressBar(min=0, max=splitIntoFolderNumber, initial=0,style=3)
fileNames<-rep(NA,nrow(rna_data)*length(unique(meta_data_samples$celltype)))
means<-rep(NA,nrow(rna_data)*length(unique(meta_data_samples$celltype)))
stds<-rep(NA,nrow(rna_data)*length(unique(meta_data_samples$celltype)))
actFile<-1
filesCreated<-0
voxelToRegion<-c()
for(actRegionRow in 1:nrow(region_to_aba)){
if(species=="human"){
for(actBiopsySite in (1:length(atlasRegions))[brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]]){
voxelToRegion<-c(voxelToRegion,actRegionRow)
}
}
if(species=="mouse"){
voxelToRegion<-c(voxelToRegion,rep(actRegionRow,sum(brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]>0)))
}
}
for(actFolderNumber in 1:splitIntoFolderNumber){
dir.create(paste0(outputImages,"/Data/channelimages/",actFolderNumber))
for(celltype in celltypes_with_expression){
filename<-""
if(length(celltypes_with_expression)>1){
filename<-paste0(actFolderNumber,"/zero",gsub("/","",gsub("\\\\","",celltype)))
}else{
filename<-paste0(actFolderNumber,"/zero")
}
write.table(t(as.matrix(rep(0,length(region_to_aba$atlasID)))),paste0(outputImages,"/Data/channelimages/",filename,".csv"),col.names=FALSE,row.names=FALSE,dec=".",sep=",")
}
}
geneNames<-gsub("_","",rownames(rna_data))
for(actFolderNumber in 1:splitIntoFolderNumber){
for(actGeneRow in (1:length(geneNames))[((1:length(geneNames)) %% (splitIntoFolderNumber))==(actFolderNumber-1)]){
geneName<-geneNames[actGeneRow]
for(celltype in celltypes_with_expression){
#If all regions of this gene and cell type are NA, then we don't have data about it
expressionOfGene<-region_level_gene_expression_per_celltype[[paste(celltype)]][actGeneRow,]
if(sum(is.na(expressionOfGene))<length(expressionOfGene)){
filename<-""
if(length(celltypes_with_expression)>1){
filename<-paste0(actFolderNumber,"/",geneNames[actGeneRow],"_",gsub("/","",gsub("\\\\","",celltype)))
}else{
filename<-paste0(actFolderNumber,"/",geneNames[actGeneRow])
}
fileNames[actFile]<-filename
if(sum(expressionOfGene,na.rm=TRUE)>0){
if(species=="human"){
if(createAmira){
img<-array(0,c(193,229,193))
}
}
if(species=="mouse"){
if(createAmira){
img<-array(0,c(132,80,114))
}
}
dataOnImageLevel<-rep(NA,length(voxelToRegion))
for(actRegionRow in 1:nrow(region_to_aba)){
if(!is.na(expressionOfGene[actRegionRow])){#only add data if it's not NA
if(species=="human"){
for(actBiopsySite in (1:length(atlasRegions))[brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]]){
if(createAmira){
img[round(coordinates$X[actBiopsySite]),round(coordinates$Y[actBiopsySite]),round(coordinates$Z[actBiopsySite])]<-expressionOfGene[actRegionRow]
}
dataOnImageLevel[voxelToRegion==actRegionRow]<-expressionOfGene[actRegionRow]
}
}
if(species=="mouse"){
if(createAmira){
img[brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]]<-expressionOfGene[actRegionRow]
}
dataOnImageLevel[voxelToRegion==actRegionRow]<-expressionOfGene[actRegionRow]
}
}
}
dataOnImageLevel[is.na(dataOnImageLevel)]<-0
means[actFile]<-mean(dataOnImageLevel/maximumValue*255)
stds[actFile]<-sd(dataOnImageLevel/maximumValue*255)
if(createAmira){
write.amira(img,
paste0(outputImages,"/Data/channelimages/",filename,".am"),
maxValue=maximumValue)
filesCreated<-filesCreated+1
}else{
expressionOfGene[is.na(expressionOfGene)]<-0
#expressionOfGene<-floor(expressionOfGene/maximumValue*255) #scale to one byte
expressionOfGene<-(expressionOfGene/maximumValue*255) #scale to value between 0 and 256 (can be scaled back with maximum value)
write.table(t(as.matrix(expressionOfGene)),paste0(outputImages,"/Data/channelimages/",filename,".csv"),col.names=FALSE,row.names=FALSE,dec=".",sep=",")
filesCreated<-filesCreated+1
}
}else{
means[actFile]<-0
stds[actFile]<-0
}
actFile<-actFile+1
}
}
}
setTxtProgressBar(pb, actFolderNumber)
}
datasetJson[["fileInfo"]]<-data.frame(filename=fileNames[!is.na(fileNames)],meanValue=means[!is.na(fileNames)],stdValue=stds[!is.na(fileNames)])
close(pb)
}
if(new_index==FALSE && (exists("useCores") && useCores>1)){
print(paste0("Compute mean gene expression on biopsy site level for every gene in ",useCores," threads"))
splitIntoFolderNumber<-50
library(foreach, lib=libFolder)
library(doParallel, lib=libFolder)
clComputing<-0
if(useCores>1){
clComputing <-
makeCluster(
useCores,
type = "PSOCK",
timeout = 3600,
outfile = paste0(outputDir,datasetJson[["name"]], "_parallel.log")
)
registerDoParallel(clComputing)
}
#Create gene expression data as amira file
filesCreated<-0
voxelToRegion<-c()
for(actRegionRow in 1:nrow(region_to_aba)){
if(species=="human"){
for(actBiopsySite in (1:length(atlasRegions))[brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]]){
voxelToRegion<-c(voxelToRegion,actRegionRow)
}
}
if(species=="mouse"){
voxelToRegion<-c(voxelToRegion,rep(actRegionRow,sum(brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]>0)))
}
}
for(actFolderNumber in 1:splitIntoFolderNumber){
dir.create(paste0(outputImages,"/Data/channelimages/",actFolderNumber))
for(celltype in celltypes_with_expression){
filename<-""
if(length(celltypes_with_expression)>1){
filename<-paste0(actFolderNumber,"/zero",gsub("/","",gsub("\\\\","",celltype)))
}else{
filename<-paste0(actFolderNumber,"/zero")
}
write.table(t(as.matrix(rep(0,length(region_to_aba$atlasID)))),paste0(outputImages,"/Data/channelimages/",filename,".csv"),col.names=FALSE,row.names=FALSE,dec=".",sep=",")
}
}
geneNames<-gsub("_","",rownames(rna_data))
filedata<-foreach(actFolderNumber = 1:splitIntoFolderNumber,
.combine = "c",
.inorder = FALSE,
.multicombine = TRUE) %dopar% {
print(paste0("Compute Folder ",actFolderNumber,"/",splitIntoFolderNumber))
start_time <- Sys.time()
actFile<-1
fileNames<-rep(NA,length(geneNames))
means<-rep(NA,length(geneNames))
stds<-rep(NA,length(geneNames))
for(celltype in celltypes_with_expression){
expressionOfGenes<-region_level_gene_expression_per_celltype[[paste(celltype)]]
for(actGeneRow in (1:length(geneNames))[((1:length(geneNames)) %% (splitIntoFolderNumber))==(actFolderNumber-1)]){
#If all regions of this gene and cell type are NA, then we don't have data about it
expressionOfGene<-expressionOfGenes[actGeneRow,]
if(sum(is.na(expressionOfGene))<length(expressionOfGene)){
filename<-""
if(length(celltypes_with_expression)>1){
filename<-paste0(actFolderNumber,"/",geneNames[actGeneRow],"_",celltype)
}else{
filename<-paste0(actFolderNumber,"/",geneNames[actGeneRow])
}
fileNames[actFile]<-filename
if(sum(expressionOfGene,na.rm=TRUE)>0){
if(species=="human"){
if(createAmira){
img<-array(0,c(193,229,193))
}
}
if(species=="mouse"){
if(createAmira){
img<-array(0,c(132,80,114))
}
}
dataOnImageLevel<-rep(NA,length(voxelToRegion))
for(actRegionRow in 1:nrow(region_to_aba)){
if(!is.na(expressionOfGene[actRegionRow])){#only add data if it's not NA
if(species=="human"){
for(actBiopsySite in (1:length(atlasRegions))[brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]]){
if(createAmira){
img[round(coordinates$X[actBiopsySite]),round(coordinates$Y[actBiopsySite]),round(coordinates$Z[actBiopsySite])]<-expressionOfGene[actRegionRow]
}
dataOnImageLevel[voxelToRegion==actRegionRow]<-expressionOfGene[actRegionRow]
}
}
if(species=="mouse"){
if(createAmira){
img[brainRegionSave[[paste(region_to_aba$atlasID[actRegionRow])]]]<-expressionOfGene[actRegionRow]
}
dataOnImageLevel[voxelToRegion==actRegionRow]<-expressionOfGene[actRegionRow]
}
}
}
dataOnImageLevel[is.na(dataOnImageLevel)]<-0
means[actFile]<-mean(dataOnImageLevel/maximumValue*255)
stds[actFile]<-sd(dataOnImageLevel/maximumValue*255)
if(createAmira){
write.amira(img,
paste0(outputImages,"/Data/channelimages/",filename,".am"),
maxValue=maximumValue)
}else{
expressionOfGene[is.na(expressionOfGene)]<-0
#expressionOfGene<-floor(expressionOfGene/maximumValue*255) #scale to one byte
expressionOfGene<-(expressionOfGene/maximumValue*255) #scale to value between 0 and 256 (can be scaled back with maximum value)
write.table(t(as.matrix(expressionOfGene)),paste0(outputImages,"/Data/channelimages/",filename,".csv"),col.names=FALSE,row.names=FALSE,dec=".",sep=",")
}
}else{
means[actFile]<-0
stds[actFile]<-0
}
actFile<-actFile+1
}
}
}
print(paste0(
"Folder  ",actFolderNumber,"/",splitIntoFolderNumber," took ",
difftime(Sys.time(), start_time, units = "secs"),
"secs for ",sum(means>0,na.rm=TRUE)," files!"
))
return(list(list(means=means,stds=stds, fileNames=fileNames)))
}
stopCluster(clComputing)
means <- unlist(lapply(filedata, function(x) {
return(x$means)
}))
stds <- unlist(lapply(filedata, function(x) {
return(x$stds)
}))
fileNames <- unlist(lapply(filedata, function(x) {
return(x$fileNames)
}))
filesCreated<-sum(means>0,na.rm=TRUE)
datasetJson[["fileInfo"]]<-data.frame(filename=fileNames[!is.na(fileNames)],meanValue=means[!is.na(fileNames)],stdValue=stds[!is.na(fileNames)])
}
write(toJSON(datasetJson),outputData)
print(paste0("Dataset ",datasetJson[["name"]]," done, ",filesCreated," files created!"))
if(new_index==TRUE){
print("Compute TSNE....")
set.seed(1899)
mydata <- CreateSeuratObject(counts = count_matrix, project = datasetJson[["name"]])
mydata <- FindVariableFeatures(mydata)
mydata <- ScaleData(object = mydata, features = VariableFeatures(object = mydata))
mydata <- RunPCA(
object = mydata, features = VariableFeatures(object = mydata), verbose = F,
npcs = 20
)
tsne<-RunTSNE(
object = mydata, dims = 1:10, do.fast = TRUE, check_duplicates = FALSE,
num_threads = 10
)
reductions<-tsne@reductions
save(reductions, file = paste0(outputImages,"/reductions.RData"))
save(tsne, file = paste0(outputImages,"/seuratObject.RData"))
}
print("Zip data...")
setwd(outputDir)
if(new_index==FALSE){
if(length(list.files(paste0(outputImages,"/Data/channelimages/")))>10000){
zip(paste0(outputDir,"/",datasetJson[["name"]],".zip"),flags="-q",c(gsub(outputDir,"",outputData),
gsub(outputDir,"",paste0(outputImages,"/coordinates_to_region_index.csv")),
paste0(gsub(outputDir,"",paste0(outputImages,"/Data/channelimages/")),list.files(paste0(outputImages,"/Data/channelimages/")))))
}else{
pb <- txtProgressBar(min=0, max=length(list.files(paste0(outputImages,"/Data/channelimages/"))), initial=0,style=3)
zip(paste0(outputDir,"/",datasetJson[["name"]],".zip"),
flags="-q",
c(gsub(outputDir,"",outputData),
gsub(outputDir,"",paste0(outputImages,"/coordinates_to_region_index.csv"))))
actFile<-1
for(fileOrDirectory in list.files(paste0(outputImages,"/Data/channelimages/"))){
zip(paste0(outputDir,"/",datasetJson[["name"]],".zip"),
flags="-qr",
c(gsub(outputDir,"",outputData),
gsub(outputDir,"",paste0(outputImages,"/coordinates_to_region_index.csv")),
paste0(gsub(outputDir,"",paste0(outputImages,"/Data/channelimages/")),fileOrDirectory)
))
setTxtProgressBar(pb, actFile)
actFile<-actFile+1
}
close(pb)
}
}else{
zip(paste0(outputDir,"/",datasetJson[["name"]],"_count_matrix.zip"),flags="-q",c(gsub(outputDir,"",outputData),
gsub(outputDir,"",paste0(outputImages,"/coordinates_to_region_index.csv")),
gsub(outputDir,"",paste0(outputImages,"/gene_information.csv")),
gsub(outputDir,"",paste0(outputImages,"/sample_information.csv")),
gsub(outputDir,"",paste0(outputImages,"/reductions.RData")),
gsub(outputDir,"",paste0(outputImages,"/count_matrix.csv"))))
zip(paste0(outputDir,"/",datasetJson[["name"]],"_seuratData.zip"),flags="-q",c(gsub(outputDir,"",paste0(outputImages,"/coordinates_to_region_index.csv")),
gsub(outputDir,"",paste0(outputImages,"/gene_information.csv")),
gsub(outputDir,"",paste0(outputImages,"/sample_information.csv")),
gsub(outputDir,"",paste0(outputImages,"/seuratObject.RData"))))
}
#unlink(outputData, recursive = TRUE)
#unlink(outputImages, recursive = TRUE)
print("Done!")
sink()
meta_data_samples$celltype[salineSamples]
unique( meta_data_samples$celltype[salineSaunique())
unique( meta_data_samples$celltype[salineSamples])
table( meta_data_samples$celltype[salineSamples])
table( meta_data_samples$celltype[adolSamples])
length(meta_data_samples$celltype)
2^2
log2(0.41099)
log2(0.35634)
exp(0.35634)
2^0.35634
